#===========================================================================
# ~/.profile: Executed by the command interpreter for login shells
# This file is not read by bash, if ~/.bash_profile or ~/.bash_login exist
#===========================================================================

#--- Check ssh security
sudo /usr/local/bin/check_ssh_security.sh "user_login"

#--- Load docker injected variables
if [ -f /var/tmp/bosh-cli/bosh-cli.env ] ; then
  . /var/tmp/bosh-cli/bosh-cli.env
fi

#--- CA certs
export BOSH_CA_CERT="/etc/ssl/certs/ca-certificates.crt"

#--- CF cli environment
export CF_COLOR=true

#--- Modify home user (on shared disk)
export MY_BOSH_USER=`hostname`
export HOME=/data/shared/${MY_BOSH_USER}

#--- Create user directory
if [ ! -d ${HOME} ] ; then
  mkdir -p ${HOME}
fi

#--- Set kubeclt read-only editor
export KUBE_EDITOR="/usr/local/bin/kubectl-ro-editor.sh"

#--- Set k9s config path
export K9SCONFIG=${HOME}/.k9s
if [ ! -d ${K9SCONFIG} ] ; then
  mkdir -p ${K9SCONFIG}
fi

#--- Create k9s plugins
cat > ${K9SCONFIG}/plugin.yml <<'EOF'
plugin:
  flux-trace:
    shortCut: z
    confirm: false
    description: Flux trace
    scopes:
    - all
    command: sh
    background: false
    args:
    - -c
    - "flux trace $NAME --kind `echo $RESOURCE_NAME | sed -E 's/(s|es)$//g'` --api-version $RESOURCE_GROUP/$RESOURCE_VERSION --namespace $NAMESPACE $NAME | less"
  get-all:
    shortCut: x
    confirm: false
    description: Get all
    scopes:
    - all
    command: sh
    background: false
    args:
    - -c
    - "kubectl get-all -n $NAMESPACE | less"
  toggle-helmrelease:
    shortCut: Shift-T
    confirm: true
    scopes:
      - helmreleases
    description: Toggle suspend/resume
    command: sh
    background: false
    args:
      - -c
      - "flux $([ $(kubectl get helmreleases -n $NAMESPACE $NAME -o=custom-columns=TYPE:.spec.suspend | tail -1) = \"true\" ] && echo \"resume\" || echo \"suspend\") helmrelease --context $CONTEXT -n $NAMESPACE $NAME | less"
  toggle-kustomization:
    shortCut: Shift-T
    confirm: true
    scopes:
      - kustomizations
    description: Toggle suspend/resume
    command: sh
    background: false
    args:
      - -c
      - "flux $([ $(kubectl get kustomizations -n $NAMESPACE $NAME -o=custom-columns=TYPE:.spec.suspend | tail -1) = \"true\" ] && echo \"resume\" || echo \"suspend\") kustomization --context $CONTEXT -n $NAMESPACE $NAME | less"
  reconcile-git:
    shortCut: Shift-Z
    confirm: false
    description: Flux reconcile
    scopes:
    - gitrepositories
    command: sh
    background: false
    args:
    - -c
    - "flux reconcile source git --context $CONTEXT -n $NAMESPACE $NAME | less"
  reconcile-hr:
    shortCut: Shift-Z
    confirm: false
    description: Flux reconcile
    scopes:
    - helmreleases
    command: sh
    background: false
    args:
    - -c
    - "flux reconcile helmrelease --context $CONTEXT -n $NAMESPACE $NAME | less"
  reconcile-ks:
    shortCut: Shift-Z
    confirm: false
    description: Flux reconcile
    scopes:
    - kustomizations
    command: sh
    background: false
    args:
    - -c
    - "flux reconcile kustomization --context $CONTEXT -n $NAMESPACE $NAME | less"
  submit-argoworkflow-template:
    shortCut: t
    confirm: true
    description: Submit argo workflow
    scopes:
    - workflowtemplates
    command: sh
    args:
    - -c
    - "argo submit --from workflowtemplate/$NAME -n $NAMESPACE | less"
EOF

#--- Copy bash user configuration
cp /home/bosh/.bashrc ${HOME}/.bashrc

#--- Redefine GIT config file path
export XDG_CONFIG_HOME=${HOME}

#--- Redefine command history file path
export HISTFILE=${HOME}/.bash_history

#--- Link to kubectl krew repository
if [ -d /home/bosh/.krew ] ; then
  rm -fr ${HOME}/.krew > /dev/null 2>&1
  ln -s /home/bosh/.krew ${HOME}/.krew
fi

#--- Link to Cloud Foundry plugins repository
if [ -L ${HOME}/.cf ] ; then
  rm ${HOME}/.cf
else
  if [ ! -d ${HOME}/.cf ] ; then
    mkdir -p ${HOME}/.cf
  fi
fi
if [ ! -L ${HOME}/.cf/plugins ] ; then
  rm -fr ${HOME}/.cf/plugins > /dev/null 2>&1
  ln -s /home/bosh/.cf/plugins ${HOME}/.cf/plugins
fi

#--- Redefine Path to binary
export PATH=.:/data/shared/${MY_BOSH_USER}/bin:/home/bosh/google-cloud-sdk/bin:${HOME}/bosh/template/admin:${HOME}/.krew/bin:${PATH}

#--- Init user aliases
cat > ${HOME}/.bash_aliases <<'EOF'
#--- Git aliases
alias checkout='function __gco() { git checkout $1 ; git pull --rebase; }; __gco'
alias commit='function __gcm() { git add . ; git commit -m "$1" ; unset -f __gcm; }; __gcm'
alias gitlog='git log --graph --pretty=format:'\''%C(yellow)%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cn %ci)%Creset'\'' --abbrev-commit'
alias prune='git fetch --prune'
alias pull='git pull --rebase ; git fetch --prune'
alias push='git pull --rebase ; git fetch --prune ; git push'
alias status='git status'

#--- Cli aliases
alias bosh-clean-prometheus-tasks='for var in $(bosh tasks | grep "queued" | grep "prometheus" | awk "{print $1}") ; do bosh cancel-task $var ; done'
alias bosh-task='function __bt() { bosh task $1 --debug | grep -vE " BEGIN| COMMIT| SELECT |INSERT INTO|DELETE FROM| UPDATE | WHERE |Renewing lock"; }; __bt'
alias credhub-get='function __cg() { log-credhub -i ; credhub get -n $1 -j | jq .value -r; }; __cg'
alias fly='fly -t concourse'
alias k='/usr/local/bin/kubectl'
alias k9s='if [ -f ${K9SCONFIG}/config.yml ] ; then sed -i "s+logoless:.*+logoless: true+" ${K9SCONFIG}/config.yml ; fi ; k9s'
alias k8s-token='/usr/local/bin/k8s-token.sh'
alias log-bosh='. /usr/local/bin/log-bosh.sh'
alias log-cf='. /usr/local/bin/log-cf.sh'
alias log-credhub='. /usr/local/bin/log-credhub.sh'
alias log-fly='. /usr/local/bin/log-fly.sh'
alias log-govc='. /usr/local/bin/log-govc.sh'
alias log-k8s='. /usr/local/bin/log-k8s.sh'
alias log-openstack='. /usr/local/bin/log-openstack.sh'
alias log-shield='. /usr/local/bin/log-shield.sh'
alias log-uaac='. /usr/local/bin/log-uaac.sh'
alias os='openstack'
alias prune-workers='fly prune-worker -a'
alias switch='. /usr/local/bin/switch.sh'

#--- Docker aliases
alias dim='docker images'
alias dps='docker ps -a'
alias dprune='docker container prune'
alias dsh='function __dsh() { docker exec -it $1 sh; }; __dsh'

#--- Tools aliases
alias diff='colordiff'
alias f='function __f() { printf "%100s\n"|tr " " "=";find . ! -regex ".*[/]\.git[/]?.*" ! -regex ".*last-deployment-failure\.yml" -type f,l -not -xtype l -not -xtype d -print0 | xargs -0 grep -I -i --color "$1";unset -f __f;printf "%100s\n"|tr " " "="; }; __f'
alias generate-password='apg -MCLN -n 1 -m 30'
alias kube-editor='. /usr/local/bin/kube-editor.sh'
alias ps1-clear='unset BOSH_TARGET ; unset K8S_CONTEXT'
alias proxy='. /usr/local/bin/proxy.sh'
alias show-cert='function __scrt() { openssl x509 -text -in $1; }; __scrt'
alias show-csr='function __scsr() { openssl req -noout -text -in $1; }; __scsr'
alias tn='function __tn() { echo -ne "\033]0;$@\007";unset -f __t;printf "\n"; }; __tn'
alias toggle-proxy='. /usr/local/bin/proxy.sh'
alias tools='. /usr/local/bin/tools.sh'
EOF

#--- Init bash profile
cat > ${HOME}/.bash_profile <<'EOF'
#--- Load user configuration
. ~/.bashrc

#--- Colors and styles
export RED='\033[31m'
export GREEN='\033[32m'
export YELLOW='\033[33m'
export BLUE='\033[34m'
export CYAN='\033[36m'

export STD='\033[0m'
export BOLD='\033[1m'
export REVERSE='\033[7m'

export GIT_SYMBOL=$'\u2387'
export PROXY_SYMBOL=$'\u26a1'
export BOSH_SYMBOL=$'\u2601\ufe0f'
export K8S_SYMBOL=$'\u2638\ufe0f'

#--- Set dynamic user prompt
set_proxy_prompt()
{
  if [ ! -z "${PROXY_TYPE}" ] ; then
    echo "${PROXY_SYMBOL}${PROXY_TYPE} proxy "
  else
    echo ""
  fi
}

set_git_prompt()
{
  local BRANCH=$(git symbolic-ref HEAD --short 2> /dev/null)
  if [ ! -z "${BRANCH}" ] ; then
    echo "${GIT_SYMBOL} ${BRANCH} "
  else
    echo ""
  fi
}

set_bosh_prompt()
{
  if [ ! -z "${BOSH_TARGET}" ] ; then
    if [ ! -z "${BOSH_DEPLOYMENT}" ] ; then
      echo "${BOSH_SYMBOL}  bosh-${BOSH_TARGET}:${BOSH_DEPLOYMENT} "
    else
      echo "${BOSH_SYMBOL}  bosh-${BOSH_TARGET} "
    fi
  else
    echo ""
  fi
}

set_k8s_prompt()
{
  K8S_CONTEXT="$(kubectl ctx -c 2> /dev/null)"
  if [ $? != 0 ] ; then
    echo ""
  else
    K8S_NS="$(kubectl ns -c 2> /dev/null)"
    if [ $? != 0 ] ; then
      if [ -z ${KUBE_EDITOR} ] ; then
        echo "${K8S_SYMBOL}  ${K8S_CONTEXT} (W) "
      else
        echo "${K8S_SYMBOL}  ${K8S_CONTEXT} "
      fi
    else
      if [ -z ${KUBE_EDITOR} ] ; then
        echo "${K8S_SYMBOL}  ${K8S_CONTEXT}:${K8S_NS} (W) "
      else
        echo "${K8S_SYMBOL}  ${K8S_CONTEXT}:${K8S_NS} "
      fi
    fi
  fi
}

set_prompt() {
  export PS1="\n${REVERSE}${GREEN}\h@${SITE_NAME} ${YELLOW}$(set_proxy_prompt)${CYAN}\$(set_git_prompt)\$(set_bosh_prompt)\$(set_k8s_prompt)${BLUE}\w${STD}\n$ "
}

set_prompt

#--- Set locales
export LANG=en_US.UTF-8
export LANGUAGE=en_US

#--- Set terminal name (can change with "t" alias)
echo -en "\033]0;${MY_BOSH_USER}@${SITE_NAME}\007"

#--- Grep colorization
export GREP_COLORS="fn=1;34:se=1;34:mt=1;33"

#--- bosh cli completion
eval "$(/home/bosh/bosh-complete-linux bash-source)"

#--- fly cli completion
_fly_completion() {
  #--- All arguments except the first one
  args=("${COMP_WORDS[@]:1:$COMP_CWORD}")
  #--- Only split on newlines
  local IFS=$'\n'
  #--- Call completion (note that the first element of COMP_WORDS is the executable itself)
  COMPREPLY=($(GO_FLAGS_COMPLETION=1 ${COMP_WORDS[0]} "${args[@]}"))
  return 0
}
complete -F _fly_completion fly

#--- minio cli completion
if [ -f /usr/share/bash-completion/bash_completion ] ; then
  source /usr/share/bash-completion/bash_completion
fi
complete -C /usr/local/bin/mc mc

#--- govc cli completion
_govc_completion()
{
  local cur prev subcmd
  prev=${COMP_WORDS[COMP_CWORD-1]}
  cur=${COMP_WORDS[COMP_CWORD]}
  subcmd=${COMP_WORDS[1]}
  COMPREPLY=()

  if [[ ${prev} == "govc" ]] ; then
    COMPREPLY=( $(compgen -W "$(govc -h | grep -v Usage | tr -s '\n' ' ')" -- ${cur}) )
    return 0

  elif [[ ${cur} == "-"* ]] ; then
    : #--- drop out and show options

  elif [[ ${subcmd} == "ls" ]] ; then #--- not completing an option, try for appropriate values
    if [[ ${prev} == "-t" ]] ; then
      COMPREPLY=( $(compgen -W "$(govc ls -l "/**" | awk '{print $2}' | sort -u | tr -d '()' | tr '\n' ' '  )" -- ${cur}) )
    else
      COMPREPLY=( $(compgen -W "$(govc ls "${cur:-/*}*" | tr -s '\n' ' ' )" -- ${cur}) )
    fi

  elif [[ ${subcmd} == "vm."* || ${prev} == "-vm" ]] ; then
    COMPREPLY=( $(compgen -W "$(govc ls -t VirtualMachine -l "${cur}*" | awk '{print $1}' | tr -s '\n' ' ' )" -- ${cur}) )
  fi

  #--- did not hit any specifcs so show all options from help
  if [[ -z ${COMPREPLY} ]] ; then
    COMPREPLY=( $(compgen -W "-h $(govc ${subcmd} -h | awk '{print $1}' | grep "^-" | sed -e 's/=.*//g' | tr -s '\n' ' ' )" -- ${cur}) )
  fi

  return 0
}
complete -F _govc_completion govc

#--- flux cli completion
source <(flux completion bash)

#--- argo cli completion
source <(argo completion bash)

#--- gcloud completion
source /home/bosh/google-cloud-sdk/completion.bash.inc

#--- Load OSB-CMDB bash functions
if [ -f /usr/local/bin/cf-cli-cmdb-functions.bash ] ; then
  source /usr/local/bin/cf-cli-cmdb-functions.bash
fi

EOF

#--- Load user bash profile
. ${HOME}/.bash_profile

cd ${HOME}
